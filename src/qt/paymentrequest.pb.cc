// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paymentrequest.proto

#include "paymentrequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace payments {
PROTOBUF_CONSTEXPR Output::Output(
    ::_pbi::ConstantInitialized)
  : script_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u}){}
struct OutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDefaultTypeInternal _Output_default_instance_;
PROTOBUF_CONSTEXPR PaymentDetails::PaymentDetails(
    ::_pbi::ConstantInitialized)
  : outputs_()
  , network_(nullptr, ::_pbi::ConstantInitialized{})
  , memo_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payment_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , merchant_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_(uint64_t{0u})
  , expires_(uint64_t{0u}){}
struct PaymentDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentDetailsDefaultTypeInternal() {}
  union {
    PaymentDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentDetailsDefaultTypeInternal _PaymentDetails_default_instance_;
PROTOBUF_CONSTEXPR PaymentRequest::PaymentRequest(
    ::_pbi::ConstantInitialized)
  : pki_type_(nullptr, ::_pbi::ConstantInitialized{})
  , pki_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serialized_payment_details_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payment_details_version_(1u){}
struct PaymentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentRequestDefaultTypeInternal() {}
  union {
    PaymentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentRequestDefaultTypeInternal _PaymentRequest_default_instance_;
PROTOBUF_CONSTEXPR X509Certificates::X509Certificates(
    ::_pbi::ConstantInitialized)
  : certificate_(){}
struct X509CertificatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509CertificatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509CertificatesDefaultTypeInternal() {}
  union {
    X509Certificates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509CertificatesDefaultTypeInternal _X509Certificates_default_instance_;
PROTOBUF_CONSTEXPR Payment::Payment(
    ::_pbi::ConstantInitialized)
  : transactions_()
  , refund_to_()
  , merchant_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , memo_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PaymentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentDefaultTypeInternal() {}
  union {
    Payment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentDefaultTypeInternal _Payment_default_instance_;
PROTOBUF_CONSTEXPR PaymentACK::PaymentACK(
    ::_pbi::ConstantInitialized)
  : memo_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payment_(nullptr){}
struct PaymentACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentACKDefaultTypeInternal() {}
  union {
    PaymentACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentACKDefaultTypeInternal _PaymentACK_default_instance_;
}  // namespace payments
static ::_pb::Metadata file_level_metadata_paymentrequest_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_paymentrequest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_paymentrequest_2eproto = nullptr;

const uint32_t TableStruct_paymentrequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::payments::Output, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::payments::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::Output, amount_),
  PROTOBUF_FIELD_OFFSET(::payments::Output, script_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, network_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, outputs_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, time_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, expires_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, memo_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, payment_url_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentDetails, merchant_data_),
  0,
  ~0u,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, payment_details_version_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, pki_type_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, pki_data_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, serialized_payment_details_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentRequest, signature_),
  4,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::payments::X509Certificates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::X509Certificates, certificate_),
  PROTOBUF_FIELD_OFFSET(::payments::Payment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::payments::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::Payment, merchant_data_),
  PROTOBUF_FIELD_OFFSET(::payments::Payment, transactions_),
  PROTOBUF_FIELD_OFFSET(::payments::Payment, refund_to_),
  PROTOBUF_FIELD_OFFSET(::payments::Payment, memo_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::payments::PaymentACK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::payments::PaymentACK, payment_),
  PROTOBUF_FIELD_OFFSET(::payments::PaymentACK, memo_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::payments::Output)},
  { 10, 23, -1, sizeof(::payments::PaymentDetails)},
  { 30, 41, -1, sizeof(::payments::PaymentRequest)},
  { 46, -1, -1, sizeof(::payments::X509Certificates)},
  { 53, 63, -1, sizeof(::payments::Payment)},
  { 67, 75, -1, sizeof(::payments::PaymentACK)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::payments::_Output_default_instance_._instance,
  &::payments::_PaymentDetails_default_instance_._instance,
  &::payments::_PaymentRequest_default_instance_._instance,
  &::payments::_X509Certificates_default_instance_._instance,
  &::payments::_Payment_default_instance_._instance,
  &::payments::_PaymentACK_default_instance_._instance,
};

const char descriptor_table_protodef_paymentrequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024paymentrequest.proto\022\010payments\"+\n\006Outp"
  "ut\022\021\n\006amount\030\001 \001(\004:\0010\022\016\n\006script\030\002 \002(\014\"\243\001"
  "\n\016PaymentDetails\022\025\n\007network\030\001 \001(\t:\004main\022"
  "!\n\007outputs\030\002 \003(\0132\020.payments.Output\022\014\n\004ti"
  "me\030\003 \002(\004\022\017\n\007expires\030\004 \001(\004\022\014\n\004memo\030\005 \001(\t\022"
  "\023\n\013payment_url\030\006 \001(\t\022\025\n\rmerchant_data\030\007 "
  "\001(\014\"\225\001\n\016PaymentRequest\022\"\n\027payment_detail"
  "s_version\030\001 \001(\r:\0011\022\026\n\010pki_type\030\002 \001(\t:\004no"
  "ne\022\020\n\010pki_data\030\003 \001(\014\022\"\n\032serialized_payme"
  "nt_details\030\004 \002(\014\022\021\n\tsignature\030\005 \001(\014\"\'\n\020X"
  "509Certificates\022\023\n\013certificate\030\001 \003(\014\"i\n\007"
  "Payment\022\025\n\rmerchant_data\030\001 \001(\014\022\024\n\014transa"
  "ctions\030\002 \003(\014\022#\n\trefund_to\030\003 \003(\0132\020.paymen"
  "ts.Output\022\014\n\004memo\030\004 \001(\t\">\n\nPaymentACK\022\"\n"
  "\007payment\030\001 \002(\0132\021.payments.Payment\022\014\n\004mem"
  "o\030\002 \001(\tB(\n\036org.bitcoin.protocols.payment"
  "sB\006Protos"
  ;
static ::_pbi::once_flag descriptor_table_paymentrequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_paymentrequest_2eproto = {
    false, false, 649, descriptor_table_protodef_paymentrequest_2eproto,
    "paymentrequest.proto",
    &descriptor_table_paymentrequest_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_paymentrequest_2eproto::offsets,
    file_level_metadata_paymentrequest_2eproto, file_level_enum_descriptors_paymentrequest_2eproto,
    file_level_service_descriptors_paymentrequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_paymentrequest_2eproto_getter() {
  return &descriptor_table_paymentrequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_paymentrequest_2eproto(&descriptor_table_paymentrequest_2eproto);
namespace payments {

// ===================================================================

class Output::_Internal {
 public:
  using HasBits = decltype(std::declval<Output>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_script(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_script()) {
    script_.Set(from._internal_script(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:payments.Output)
}

inline void Output::SharedCtor() {
script_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  script_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:payments.Output)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_.Destroy();
}

void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    script_.ClearNonDefaultToEmpty();
  }
  amount_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 amount = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // required bytes script = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.Output)
  size_t total_size = 0;

  // required bytes script = 2;
  if (_internal_has_script()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 amount = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }

void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Output *>(to)->MergeFrom(
      static_cast<const Output &>(from));
}


void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.Output)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_script(from._internal_script());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[0]);
}

// ===================================================================

class PaymentDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentDetails>()._has_bits_);
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payment_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_merchant_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString PaymentDetails::_i_give_permission_to_break_this_code_default_network_{{{"main", 4}}, {nullptr}};
PaymentDetails::PaymentDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outputs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.PaymentDetails)
}
PaymentDetails::PaymentDetails(const PaymentDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  network_.InitDefault();
  if (from._internal_has_network()) {
    network_.Set(from._internal_network(), 
      GetArenaForAllocation());
  }
  memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_memo()) {
    memo_.Set(from._internal_memo(), 
      GetArenaForAllocation());
  }
  payment_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payment_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payment_url()) {
    payment_url_.Set(from._internal_payment_url(), 
      GetArenaForAllocation());
  }
  merchant_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merchant_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merchant_data()) {
    merchant_data_.Set(from._internal_merchant_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&expires_) -
    reinterpret_cast<char*>(&time_)) + sizeof(expires_));
  // @@protoc_insertion_point(copy_constructor:payments.PaymentDetails)
}

inline void PaymentDetails::SharedCtor() {
network_.InitDefault();
memo_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payment_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payment_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
merchant_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merchant_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expires_) -
    reinterpret_cast<char*>(&time_)) + sizeof(expires_));
}

PaymentDetails::~PaymentDetails() {
  // @@protoc_insertion_point(destructor:payments.PaymentDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  network_.Destroy();
  memo_.Destroy();
  payment_url_.Destroy();
  merchant_data_.Destroy();
}

void PaymentDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.PaymentDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      network_.ClearToDefault(::payments::PaymentDetails::_i_give_permission_to_break_this_code_default_network_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      memo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      payment_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      merchant_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expires_) -
        reinterpret_cast<char*>(&time_)) + sizeof(expires_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string network = 1 [default = "main"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.PaymentDetails.network");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .payments.Output outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 expires = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string memo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.PaymentDetails.memo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string payment_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_payment_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.PaymentDetails.payment_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes merchant_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_merchant_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.PaymentDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string network = 1 [default = "main"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.PaymentDetails.network");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network(), target);
  }

  // repeated .payments.Output outputs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  // optional uint64 expires = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expires(), target);
  }

  // optional string memo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.PaymentDetails.memo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_memo(), target);
  }

  // optional string payment_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payment_url().data(), static_cast<int>(this->_internal_payment_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.PaymentDetails.payment_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payment_url(), target);
  }

  // optional bytes merchant_data = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_merchant_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.PaymentDetails)
  return target;
}

size_t PaymentDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.PaymentDetails)
  size_t total_size = 0;

  // required uint64 time = 3;
  if (_internal_has_time()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payments.Output outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string network = 1 [default = "main"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_network());
    }

    // optional string memo = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memo());
    }

    // optional string payment_url = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payment_url());
    }

    // optional bytes merchant_data = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_data());
    }

  }
  // optional uint64 expires = 4;
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expires());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentDetails::GetClassData() const { return &_class_data_; }

void PaymentDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaymentDetails *>(to)->MergeFrom(
      static_cast<const PaymentDetails &>(from));
}


void PaymentDetails::MergeFrom(const PaymentDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.PaymentDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_network(from._internal_network());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_memo(from._internal_memo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_payment_url(from._internal_payment_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_merchant_data(from._internal_merchant_data());
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      expires_ = from.expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentDetails::CopyFrom(const PaymentDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.PaymentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentDetails::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outputs_))
    return false;
  return true;
}

void PaymentDetails::InternalSwap(PaymentDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outputs_.InternalSwap(&other->outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &network_, lhs_arena,
      &other->network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payment_url_, lhs_arena,
      &other->payment_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &merchant_data_, lhs_arena,
      &other->merchant_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaymentDetails, expires_)
      + sizeof(PaymentDetails::expires_)
      - PROTOBUF_FIELD_OFFSET(PaymentDetails, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[1]);
}

// ===================================================================

class PaymentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentRequest>()._has_bits_);
  static void set_has_payment_details_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pki_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pki_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialized_payment_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString PaymentRequest::_i_give_permission_to_break_this_code_default_pki_type_{{{"none", 4}}, {nullptr}};
PaymentRequest::PaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.PaymentRequest)
}
PaymentRequest::PaymentRequest(const PaymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pki_type_.InitDefault();
  if (from._internal_has_pki_type()) {
    pki_type_.Set(from._internal_pki_type(), 
      GetArenaForAllocation());
  }
  pki_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pki_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pki_data()) {
    pki_data_.Set(from._internal_pki_data(), 
      GetArenaForAllocation());
  }
  serialized_payment_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_payment_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_payment_details()) {
    serialized_payment_details_.Set(from._internal_serialized_payment_details(), 
      GetArenaForAllocation());
  }
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  payment_details_version_ = from.payment_details_version_;
  // @@protoc_insertion_point(copy_constructor:payments.PaymentRequest)
}

inline void PaymentRequest::SharedCtor() {
pki_type_.InitDefault();
pki_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pki_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_payment_details_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_payment_details_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payment_details_version_ = 1u;
}

PaymentRequest::~PaymentRequest() {
  // @@protoc_insertion_point(destructor:payments.PaymentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pki_type_.Destroy();
  pki_data_.Destroy();
  serialized_payment_details_.Destroy();
  signature_.Destroy();
}

void PaymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.PaymentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pki_type_.ClearToDefault(::payments::PaymentRequest::_i_give_permission_to_break_this_code_default_pki_type_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      pki_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      serialized_payment_details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      signature_.ClearNonDefaultToEmpty();
    }
    payment_details_version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 payment_details_version = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_payment_details_version(&has_bits);
          payment_details_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pki_type = 2 [default = "none"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pki_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.PaymentRequest.pki_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes pki_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pki_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes serialized_payment_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serialized_payment_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.PaymentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 payment_details_version = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_payment_details_version(), target);
  }

  // optional string pki_type = 2 [default = "none"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pki_type().data(), static_cast<int>(this->_internal_pki_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.PaymentRequest.pki_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pki_type(), target);
  }

  // optional bytes pki_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pki_data(), target);
  }

  // required bytes serialized_payment_details = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serialized_payment_details(), target);
  }

  // optional bytes signature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.PaymentRequest)
  return target;
}

size_t PaymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.PaymentRequest)
  size_t total_size = 0;

  // required bytes serialized_payment_details = 4;
  if (_internal_has_serialized_payment_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_payment_details());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pki_type = 2 [default = "none"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pki_type());
    }

    // optional bytes pki_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pki_data());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional bytes signature = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional uint32 payment_details_version = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_payment_details_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentRequest::GetClassData() const { return &_class_data_; }

void PaymentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaymentRequest *>(to)->MergeFrom(
      static_cast<const PaymentRequest &>(from));
}


void PaymentRequest::MergeFrom(const PaymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.PaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pki_type(from._internal_pki_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pki_data(from._internal_pki_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_serialized_payment_details(from._internal_serialized_payment_details());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000010u) {
      payment_details_version_ = from.payment_details_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentRequest::CopyFrom(const PaymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.PaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PaymentRequest::InternalSwap(PaymentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pki_type_, lhs_arena,
      &other->pki_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pki_data_, lhs_arena,
      &other->pki_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_payment_details_, lhs_arena,
      &other->serialized_payment_details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(payment_details_version_, other->payment_details_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[2]);
}

// ===================================================================

class X509Certificates::_Internal {
 public:
};

X509Certificates::X509Certificates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  certificate_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.X509Certificates)
}
X509Certificates::X509Certificates(const X509Certificates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      certificate_(from.certificate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:payments.X509Certificates)
}

inline void X509Certificates::SharedCtor() {
}

X509Certificates::~X509Certificates() {
  // @@protoc_insertion_point(destructor:payments.X509Certificates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void X509Certificates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void X509Certificates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void X509Certificates::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.X509Certificates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificate_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509Certificates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes certificate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_certificate();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* X509Certificates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.X509Certificates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes certificate = 1;
  for (int i = 0, n = this->_internal_certificate_size(); i < n; i++) {
    const auto& s = this->_internal_certificate(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.X509Certificates)
  return target;
}

size_t X509Certificates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.X509Certificates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes certificate = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(certificate_.size());
  for (int i = 0, n = certificate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      certificate_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509Certificates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    X509Certificates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509Certificates::GetClassData() const { return &_class_data_; }

void X509Certificates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<X509Certificates *>(to)->MergeFrom(
      static_cast<const X509Certificates &>(from));
}


void X509Certificates::MergeFrom(const X509Certificates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.X509Certificates)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  certificate_.MergeFrom(from.certificate_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void X509Certificates::CopyFrom(const X509Certificates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.X509Certificates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509Certificates::IsInitialized() const {
  return true;
}

void X509Certificates::InternalSwap(X509Certificates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  certificate_.InternalSwap(&other->certificate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata X509Certificates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[3]);
}

// ===================================================================

class Payment::_Internal {
 public:
  using HasBits = decltype(std::declval<Payment>()._has_bits_);
  static void set_has_merchant_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Payment::Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena),
  refund_to_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transactions_(from.transactions_),
      refund_to_(from.refund_to_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merchant_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merchant_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merchant_data()) {
    merchant_data_.Set(from._internal_merchant_data(), 
      GetArenaForAllocation());
  }
  memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_memo()) {
    memo_.Set(from._internal_memo(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:payments.Payment)
}

inline void Payment::SharedCtor() {
merchant_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merchant_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:payments.Payment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Payment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  merchant_data_.Destroy();
  memo_.Destroy();
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.Payment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  refund_to_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      merchant_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      memo_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes merchant_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_merchant_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .payments.Output refund_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refund_to(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string memo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.Payment.memo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.Payment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes merchant_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_merchant_data(), target);
  }

  // repeated bytes transactions = 2;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .payments.Output refund_to = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refund_to_size()); i < n; i++) {
    const auto& repfield = this->_internal_refund_to(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string memo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.Payment.memo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.Payment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // repeated .payments.Output refund_to = 3;
  total_size += 1UL * this->_internal_refund_to_size();
  for (const auto& msg : this->refund_to_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes merchant_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_data());
    }

    // optional string memo = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memo());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payment::GetClassData() const { return &_class_data_; }

void Payment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Payment *>(to)->MergeFrom(
      static_cast<const Payment &>(from));
}


void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  refund_to_.MergeFrom(from.refund_to_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_merchant_data(from._internal_merchant_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_memo(from._internal_memo());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(refund_to_))
    return false;
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transactions_.InternalSwap(&other->transactions_);
  refund_to_.InternalSwap(&other->refund_to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &merchant_data_, lhs_arena,
      &other->merchant_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[4]);
}

// ===================================================================

class PaymentACK::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentACK>()._has_bits_);
  static const ::payments::Payment& payment(const PaymentACK* msg);
  static void set_has_payment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::payments::Payment&
PaymentACK::_Internal::payment(const PaymentACK* msg) {
  return *msg->payment_;
}
PaymentACK::PaymentACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:payments.PaymentACK)
}
PaymentACK::PaymentACK(const PaymentACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_memo()) {
    memo_.Set(from._internal_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payment()) {
    payment_ = new ::payments::Payment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:payments.PaymentACK)
}

inline void PaymentACK::SharedCtor() {
memo_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payment_ = nullptr;
}

PaymentACK::~PaymentACK() {
  // @@protoc_insertion_point(destructor:payments.PaymentACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  memo_.Destroy();
  if (this != internal_default_instance()) delete payment_;
}

void PaymentACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentACK::Clear() {
// @@protoc_insertion_point(message_clear_start:payments.PaymentACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payment_ != nullptr);
      payment_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .payments.Payment payment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string memo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "payments.PaymentACK.memo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:payments.PaymentACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .payments.Payment payment = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payment(this),
        _Internal::payment(this).GetCachedSize(), target, stream);
  }

  // optional string memo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "payments.PaymentACK.memo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:payments.PaymentACK)
  return target;
}

size_t PaymentACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:payments.PaymentACK)
  size_t total_size = 0;

  // required .payments.Payment payment = 1;
  if (_internal_has_payment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string memo = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentACK::GetClassData() const { return &_class_data_; }

void PaymentACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaymentACK *>(to)->MergeFrom(
      static_cast<const PaymentACK &>(from));
}


void PaymentACK::MergeFrom(const PaymentACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:payments.PaymentACK)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_memo(from._internal_memo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payment()->::payments::Payment::MergeFrom(from._internal_payment());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentACK::CopyFrom(const PaymentACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:payments.PaymentACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentACK::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_payment()) {
    if (!payment_->IsInitialized()) return false;
  }
  return true;
}

void PaymentACK::InternalSwap(PaymentACK* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  swap(payment_, other->payment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_paymentrequest_2eproto_getter, &descriptor_table_paymentrequest_2eproto_once,
      file_level_metadata_paymentrequest_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace payments
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::payments::Output*
Arena::CreateMaybeMessage< ::payments::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::payments::PaymentDetails*
Arena::CreateMaybeMessage< ::payments::PaymentDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::PaymentDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::payments::PaymentRequest*
Arena::CreateMaybeMessage< ::payments::PaymentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::PaymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::payments::X509Certificates*
Arena::CreateMaybeMessage< ::payments::X509Certificates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::X509Certificates >(arena);
}
template<> PROTOBUF_NOINLINE ::payments::Payment*
Arena::CreateMaybeMessage< ::payments::Payment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::payments::PaymentACK*
Arena::CreateMaybeMessage< ::payments::PaymentACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::payments::PaymentACK >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
